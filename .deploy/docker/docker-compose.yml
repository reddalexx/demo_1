version: "3.8"
services:

  nginx:
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - daphne
      - fastapi
      - jupyter
    volumes:
      - static_files:/project/demo/staticfiles/
      - /demo/nginx/conf:/etc/nginx/conf.d/
      - /demo/nginx/include:/etc/nginx/include/
      - /demo/nginx/certificates:/etc/nginx/certificates/

  daphne:
    image: demo_main_app
    command: bash start.sh daphne
    environment:
      HOST: "localhost"
      DJANGO_DEBUG: "false"
      USE_HTTPS: "false"
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_NAME: "demo1"
      DB_USER: "demo1"
      DB_PASSWORD: "demo1"
      WEBDAV_USER: "webdav_user"
      WEBDAV_PASSWORD: "webdav_password"
      WEBDAV_HOST: "webdav"
      WEBDAV_PORT: "80"
      ADMINER_URL: "/adminer"
      JUPYTER_URL: "/jupyter"
#    ports:
#      - "3355:3355"
    depends_on:
      - db
      - kafka
    volumes:
      - static_files:/project/demo/staticfiles/

  consumer:
    image: demo_main_app
    command: python manage.py consumer
    environment:
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_NAME: "demo1"
      DB_USER: "demo1"
      DB_PASSWORD: "demo1"
      KAFKA_URL: "kafka:9092"
    depends_on:
      - db
      - kafka

  jupyter:
    image: jupyter/minimal-notebook
    command: "start-notebook.sh --NotebookApp.token=jupyter_token --NotebookApp.base_url=/jupyter"
    environment:
      JUPYTER_PORT: "8888"
#    ports:
#      - "8888:8888"

  fastapi:
    image: demo_fastapi
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      USE_HTTPS: "false"
      DAPHNE_URL: "daphne:3355"
      REDIS_URL: "redis://redis:6379/0"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_BACKEND_URL: "redis://redis:6379/0"
      KAFKA_URL: "kafka:9092"
#    ports:
#      - "8112:8112"
#    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8112"]
    command: gunicorn app.main:app -b 0.0.0.0:8112 --keep-alive=30 -w 1 --threads 1 -k uvicorn.workers.UvicornWorker -t 180 --log-level INFO
    depends_on:
      - kafka

  celery:
    image: demo_fastapi
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      REDIS_URL: "redis://redis:6379/0"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_BACKEND_URL: "redis://redis:6379/0"
    command: celery -A app.tasks worker --loglevel=INFO
    depends_on:
      - redis

  db:
    image: postgres
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      POSTGRES_USER: "demo1"
      POSTGRES_PASSWORD: "demo1"
      POSTGRES_DB: "demo1"
    volumes:
      - db:/var/lib/postgresql/data
    ports:
      - "54321:5432"

  adminer:
    image: adminer
    deploy:
      restart_policy:
        condition: on-failure
#    ports:
#      - "8080:8080"

  zookeeper:
    image: confluent/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluent/kafka
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "demo:1:1"
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms128M"
    depends_on:
      - zookeeper
    deploy:
      restart_policy:
        condition: on-failure

  webdav:
    image: bytemark/webdav
    environment:
      AUTH_TYPE: Basic
      USERNAME: "webdav_user"
      PASSWORD: "webdav_password"
    volumes:
      - /demo/webdav:/var/lib/dav
    ports:
      - "8091:80"

  redis:
    image: redis
    volumes:
      - redis_data:/data
#    ports:
#      - "63791:6379"

volumes:
  db:
  redis_data:
  static_files:
  kafka_data:
  zookeeper_data:

networks:
  demo_network: