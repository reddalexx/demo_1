version: "3.8"
services:

  nginx:
    image: demo_nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - daphne
    volumes:
      - static_files:/project/demo/staticfiles/

  daphne:
    image: demo_main_app
    command: sh start.sh
    environment:
      DJANGO_DEBUG: "false"
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_NAME: "demo1"
      DB_USER: "demo1"
      DB_PASSWORD: "demo1"
      WEBDAV_USER: "webdav_user"
      WEBDAV_PASSWORD: "webdav_password"
      WEBDAV_HOST: "webdav"
      WEBDAV_PORT: "80"
      FASTAPI_URL: "/fastapi"
      ADMINER_URL: "/adminer"
    ports:
      - "3355:3355"
    depends_on:
      - db
      - kafka
    volumes:
      - static_files:/project/demo/staticfiles/

  consumer:
    image: demo_main_app
    command: python manage.py consumer
    environment:
      DJANGO_DEBUG: "false"
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_NAME: "demo1"
      DB_USER: "demo1"
      DB_PASSWORD: "demo1"
      KAFKA_URL: "kafka:9092"
    depends_on:
      - db
      - kafka

  fastapi:
    image: demo_fastapi
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      DAPHNE_URL: "http://daphne:3355"
      REDIS_URL: "redis://redis:6379/0"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_BACKEND_URL: "redis://redis:6379/0"
      KAFKA_URL: "kafka:9092"
    ports:
      - "8112:8112"
#    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8112"]
    command: gunicorn app.main:app -b 0.0.0.0:8112 --keep-alive=30 -w 1 --threads 1 -k uvicorn.workers.UvicornWorker -t 180 --log-level INFO
    depends_on:
      - kafka

  celery:
    image: demo_fastapi
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      REDIS_URL: "redis://redis:6379/0"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_BACKEND_URL: "redis://redis:6379/0"
    command: celery -A app.tasks worker --loglevel=INFO
    depends_on:
      - redis

  db:
    image: postgres
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      POSTGRES_USER: "demo1"
      POSTGRES_PASSWORD: "demo1"
      POSTGRES_DB: "demo1"
    volumes:
      - db:/var/lib/postgresql/data
    ports:
      - "54321:5432"

  adminer:
    image: adminer
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - "8080:8080"

  zookeeper:
    image: confluent/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluent/kafka
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "demo:1:1"
    depends_on:
      - zookeeper
    restart: on-failure

  webdav:
    image: bytemark/webdav
    environment:
      AUTH_TYPE: Basic
      USERNAME: webdav_user
      PASSWORD: webdav_password
    volumes:
      - /demo/dav:/var/lib/dav
    ports:
      - "8091:80"

  redis:
    image: redis
    volumes:
      - redis_data:/data
    ports:
      - "63791:6379"

volumes:
  db:
  redis_data:
  nginx_conf:
  static_files:
  kafka_data:
  zookeeper_data:

