version: "3.8"
services:

  nginx-clickhouse:
    image: mintance/nginx-clickhouse
    depends_on:
      - nginx
      - clickhouse
    volumes:
      - ${VOLUME_NGINX_LOGS}:/logs
      - ${VOLUME_NGINX_CLICKHOUSE}:/config

  clickhouse:
    image: yandex/clickhouse-server
    environment:
      # Default user and database will be created using `init-defaults.sh` script
      CLICKHOUSE_DB: "${CLICKHOUSE_DB}"
      CLICKHOUSE_USER: "${CLICKHOUSE_USER}"
      CLICKHOUSE_PASSWORD: "${CLICKHOUSE_PASSWORD}"
    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144
    volumes:
      - db_ch:/var/lib/clickhouse:cached
      - ${VOLUME_CLICKHOUSE}/init-defaults.sh:/docker-entrypoint-initdb.d/init-defaults.sh:ro
    ports:
      - "9000/tcp"

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,vertamedia-clickhouse-datasource"
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "vertamedia-clickhouse-datasource"
      GF_SECURITY_ADMIN_USER: "${GRAFANA_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASSWORD}"
      GF_SERVER_ROOT_URL: "http://${HOST}/grafana/"
    volumes:
      - ${VOLUME_GRAFANA}/clickhouse-datasource.yaml:/etc/grafana/provisioning/datasources/clickhouse-datasource.yaml
      - ${VOLUME_GRAFANA}/default-dashboard.yaml:/etc/grafana/provisioning/dashboards/default-dashboard.yaml
      - ${VOLUME_GRAFANA}/nginx_dashboard.json:/var/lib/grafana/dashboards/nginx_dashboard.json
    ports:
     - "3000:3000"

  nginx:
    image: nginx
    ports:
      - mode: host
        protocol: tcp
        published: 80
        target: 80
      - mode: host
        protocol: tcp
        published: 443
        target: 443
    depends_on:
      - daphne
      - fastapi
      - jupyter
    volumes:
      - static_files:/project/demo/staticfiles/
      - ${VOLUME_NGINX}/nginx.conf:/etc/nginx/nginx.conf
      - ${VOLUME_NGINX_CONF}:/etc/nginx/conf.d/
      - ${VOLUME_NGINX_HEAD}:/etc/nginx/headers/
      - ${VOLUME_NGINX_INCL}:/etc/nginx/include/
      - ${VOLUME_NGINX_CERT}:/etc/nginx/certificates/
      - ${VOLUME_NGINX_LOGS}:/var/log/nginx/

  daphne:
    image: demo_main_app
    command: bash start.sh daphne
    environment:
      HOST: "${HOST}"
      DJANGO_DEBUG: "${DJANGO_DEBUG}"
      USE_HTTPS: "${USE_HTTPS}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      REDIS_URL: "${REDIS_URL}"
      WEBDAV_USER: "${WEBDAV_USER}"
      WEBDAV_PASSWORD: "${WEBDAV_PASSWORD}"
      WEBDAV_HOST: "${WEBDAV_HOST}"
      WEBDAV_PORT: "${WEBDAV_PORT}"
      ADMINER_URL: "${ADMINER_URL}"
      JUPYTER_URL: "${JUPYTER_URL}"
      GRAFANA_URL: "${GRAFANA_URL}"
#    ports:
#      - "3355:3355"
    depends_on:
      - db
      - kafka
    volumes:
      - static_files:/project/demo/staticfiles/

  consumer:
    image: demo_main_app
    command: python manage.py consumer
    environment:
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      KAFKA_URL: "${KAFKA_URL}"
    depends_on:
      - db
      - kafka

  jupyter:
    image: jupyter/minimal-notebook
    command: "start-notebook.sh --NotebookApp.token=${JUPYTER_TOKEN} --NotebookApp.base_url=${JUPYTER_URL}"
    environment:
      JUPYTER_PORT: "${JUPYTER_PORT}"
#    ports:
#      - "8888:8888"

  fastapi:
    image: demo_fastapi
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      USE_HTTPS: "${USE_HTTPS}"
      DAPHNE_URL: "${DAPHNE_URL}"
      REDIS_URL: "${REDIS_URL}"
      CELERY_BROKER_URL: "${REDIS_URL}"
      CELERY_BACKEND_URL: "${REDIS_URL}"
      KAFKA_URL: "${KAFKA_URL}"
#    ports:
#      - "8112:8112"
#    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8112"]
    command: gunicorn app.main:app -b 0.0.0.0:${FASTAPI_PORT} --keep-alive=30 -w 1 --threads 1 -k uvicorn.workers.UvicornWorker -t 180 --log-level INFO
    depends_on:
      - kafka

  celery:
    image: demo_fastapi
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      REDIS_URL: "${REDIS_URL}"
      CELERY_BROKER_URL: "${REDIS_URL}"
      CELERY_BACKEND_URL: "${REDIS_URL}"
    command: celery -A app.tasks worker --loglevel=INFO
    depends_on:
      - redis

  db:
    image: postgres
    deploy:
      restart_policy:
        condition: on-failure
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    volumes:
      - db:/var/lib/postgresql/data
    ports:
      - "54321:5432"

  adminer:
    image: adminer
    environment:
      ADMINER_DESIGN: "mvt"
    deploy:
      restart_policy:
        condition: on-failure
#    ports:
#      - "8080:8080"

  zookeeper:
    image: confluent/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluent/kafka
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "${KAFKA_TOPIC}:1:1"
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms128M"
    depends_on:
      - zookeeper
    deploy:
      restart_policy:
        condition: on-failure

  webdav:
    image: bytemark/webdav
    environment:
      AUTH_TYPE: Basic
      USERNAME: "${WEBDAV_USER}"
      PASSWORD: "${WEBDAV_PASSWORD}"
    volumes:
      - ${VOLUME_WEBDAV}:/var/lib/dav
    ports:
      - "${WEBDAV_PUBLIC_PORT}:80"

  redis:
    image: redis
    volumes:
      - redis_data:/data
#    ports:
#      - "63791:6379"

volumes:
  db:
  db_ch:
  redis_data:
  static_files:
  kafka_data:
  zookeeper_data:

networks:
  demo_network: