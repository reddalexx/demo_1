"""
Django settings for demo project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import sys
from pathlib import Path
from urllib.parse import urlsplit


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
PROJECT_DIR = BASE_DIR / 'demo'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-o4x-%o@9=2y*18oj#1mgx4hq$==@x91rr)(9mdmxnpvt^s!i#_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'true') == 'true'
DEBUG_SQL = os.environ.get('DJANGO_DEBUG_SQL', 'false') == 'true'

SITE_ID = 1

HOST = os.environ.get('HOST', 'localhost')

ALLOWED_HOSTS = [
    HOST,
]

HTTP_PROTOCOL = 'https' if os.environ.get('USE_HTTPS', False) == 'true' else 'http'

CSRF_TRUSTED_ORIGINS = [
    f'{HTTP_PROTOCOL}://{HOST}'
]

# Application definition

INSTALLED_APPS = [
    'jet',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',

    'django_extensions',
    'rest_framework',
    'django_filters',
    'rest_framework_datatables',
    'corsheaders',
    'silk',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',

    'apps.common',
    'apps.geo',
    'apps.hotels',
    'apps.user',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "corsheaders.middleware.CorsMiddleware",
    'silk.middleware.SilkyMiddleware',
]

ROOT_URLCONF = 'demo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [PROJECT_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.common.utils.settings_ctx',
            ],
        },
    },
]

WSGI_APPLICATION = 'demo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'demo1'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '54321'),
        'USER': os.environ.get('DB_USER', 'demo1'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'demo1'),
    },
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_REDIRECT_URL = '/'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'

# django-allauth: Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            'client_id': os.getenv('SOCIAL_GOOGLE_CLIENT_ID'),
            'secret': os.getenv('SOCIAL_GOOGLE_SECRET'),
            'key': ''
        }
    }
}

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = PROJECT_DIR / 'staticfiles'
STATICFILES_DIRS = [
    PROJECT_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# WebDAV settings, see https://django-webdav-storage.readthedocs.io/en/latest/configuration.html
WEBDAV_USER = os.environ.get('WEBDAV_USER', 'webdav_user')
WEBDAV_PASSWORD = os.environ.get('WEBDAV_PASSWORD', 'webdav_password')
WEBDAV_HOST = os.environ.get('WEBDAV_INTERNAL_HOST', 'webdav')
WEBDAV_PORT = os.environ.get('WEBDAV_INTERNAL_PORT', '80')
WEBDAV_URL = os.environ.get('WEBDAV_URL', f'http://{WEBDAV_USER}:{WEBDAV_PASSWORD}@{WEBDAV_PORT}:{WEBDAV_PORT}')
WEBDAV_PUBLIC_HOST = os.environ.get('HOST', 'localhost')
WEBDAV_PUBLIC_PORT = os.environ.get('WEBDAV_PUBLIC_PORT', '8091')
WEBDAV_PUBLIC_URL = os.environ.get(
    'WEBDAV_PUBLIC_URL', f'http://{WEBDAV_USER}:{WEBDAV_PASSWORD}@{WEBDAV_PUBLIC_HOST}:{WEBDAV_PUBLIC_PORT}')
DEFAULT_FILE_STORAGE = 'django_webdav_storage.storage.WebDavStorage'
WEBDAV_RECURSIVE_MKCOL = True    # *NOT* required for nginx!

if DEBUG:
    INSTALLED_APPS += (
        'debug_toolbar',
    )
    MIDDLEWARE += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )

INTERNAL_IPS = [
    "127.0.0.1",
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_SCHEMA_CLASS': 'apps.common.schemas.CustomAutoSchema',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_datatables.renderers.DatatablesRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_datatables.filters.DatatablesFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework_datatables.pagination.DatatablesPageNumberPagination',
    'PAGE_SIZE': 15,
}

ADMINER_URL = os.environ.get('ADMINER_URL', 'http://localhost:8080')
JUPYTER_URL = os.environ.get('JUPYTER_URL', 'http://localhost:8888')
GRAFANA_URL = os.environ.get('GRAFANA_URL', 'http://localhost:3000')

REDIS_KEYS_PREFIX = ''

CORS_ALLOWED_ORIGINS = [
    # "{0.scheme}://{0.netloc}".format(urlsplit(FASTAPI_URL)),
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': [],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'stream': sys.stdout,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': (['console'] if DEBUG_SQL else []),  # Quiet by default!
            'propagate': False,
            'level': 'DEBUG' if DEBUG_SQL else 'ERROR',
        },
        'daphne': {
            'handlers': ['console'],
            'level': 'INFO'
        },
    },
}
